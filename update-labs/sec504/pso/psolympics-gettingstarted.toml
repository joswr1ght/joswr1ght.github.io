# vim: set wrap:
psolympicsevent = 'Getting Started with PowerShell'
psolympicsconf = 'C:/Tools/psolympics/psolympics.toml'
openingmessage = '''
^Welcome to the PowerShell Olympics!^ :1st_place_medal: :2nd_place_medal: :3rd_place_medal:

In this Olympic event you will get started working with PowerShell. If you get stuck on a question, run `hint` to get a hint. If you need to skip a question, you can run `skip`.

Let's get started! Run the `next` command to continue.
'''
completionmessage = '''
In this PowerShell Olympics event you started your jounrney to learn PowerShell! :clap::clap::clap:
We reviewed lots of topics, including PowerShell tab completion, the Verb-Noun syntax, aliases, help, and several different PowerShell commands. Nice work!

Learning PowerShell comes with time and practice. Feel free to repeat this Olympic event anytime you want a refresher, or just want some more practice. Close this window to return to the PowerShell Olympics launcher for your next event!
'''


[[questions]]

number = 1
question = '''
PowerShell is a powerful tool combining command-line and programming elements into one interface. Let's start this event by writing a text string to the terminal.

Enter the command `Write-Host 'Hello, PowerShell!'`, then press Enter.'''
hint = "Type the command `Write-Host 'Hello, PowerShell!'`, then press Enter."
answer = "`Write-Host 'Hello, PowerShell!'`"
type = 'str'
str = ['Write-Host', 'Hello, PowerShell!']


[[questions]]

number = 2
question = '''
Nicely done! With this command you invoked the `Write-Host` PowerShell cmdlet, and told it to display the message on the screen.

PowerShell commands and parameters options are not case-sensitive. Press the up arrow to return to the previous command, then change `Write-Host` to read `write-host` (lowercase). Press Enter to run the command.'''
hint = "Type the command `write-host 'Hello, PowerShell!'`, then press Enter."
answer = "`write-host 'Hello, PowerShell!'`"
type = 'str'
str = ['Hello', 'PowerShell', 'write-host']



[[questions]]

number = 3
py_on_begin = ''
py_on_complete = ''
question = '''
Excellent! Many developers will use proper capitalization to match PowerShell's conventions in code, but will use all lowercase when working interactively for convenience.

PowerShell supports many different commands. Let's try another. Type `Clear-Host` then press Enter.'''
hint = "Type `Clear-Host` then press Enter. Make sure you don't have any spaces between Clear and Host, just a single hyphen!"
answer = '`Clear-Host`'
type = 'str'
str = ['clear-host']
cs = false


[[questions]]

number = 4
py_on_begin = ''
py_on_complete = ''
question = '''
Excellent! `Clear-Host` will clear your screen and give you that fresh terminal feeling.

Tip: You can also clear your screen by pressing `CTRL+L`. Press the up arrow twice and run the `write-host` command again. Next, press `CTRL+L` to clear your screen. Type `next` to continue.'''
hint = 'Press `CTRL+L` by pressing and holding the Ctrl key, then press and release the L key. Then, type `next` to continue.'
answer = '`next`'
type = 'str'
str = ['gHibCNunSoLGqfdohaTi']

[[questions]]

number = 5
question = '''
Clearing your screen often can help keep PowerShell from feeling overwhelming. Run CTRL+L to clear your screen anytime during the PowerShell Olympics!

Next, let's try a different PowerShell command: `Get-ChildItem`. This command lists files and objects.'''
hint = 'Type `Get-ChildItem` using any capitalization, then press Enter.'
answer = '`Get-ChildItem`'
type = 'str'
str = ['Mode', 'LastWriteTime']


[[questions]]

number = 6
question = '''
`Get-ChildItem` is a command you will probably run a lot in PowerShell, but it's a lot of typing. Fortunately, PowerShell also supports tab completion to help you complete commands after a few characters.

Type `Get-Ch`, then press the `Tab` key. Press Enter to run the command.'''
hint = 'Type `Get-Ch`, then press Tab to complete the command, expanding to `Get-ChildItem`, then press Enter.'
answer = '`Get-ChildItem`'
type = 'str'
str = ['Mode', 'LastWriteTime']


[[questions]]

number = 7
question = '''
Notice how PowerShell completes the command for you automatically. PowerShell only knows about one command that starts with `Get-Ch`, so it expands the command to complete the name for you.

This also works for parameters as well. Press the up arrow to return to the previous command, then add a space and `\U`. Press Tab to autocomplete the parameter name, then press Enter.'''
hint = 'Type `Get-ChildItem \U`, then press Tab to complete the parameter. Press Enter to run the command.'
answer = '`Get-ChildItem C:\Users\'
type = 'str'
str = ['Public', 'User', 'Directory: C:\Users']
cs = false


[[questions]]

number = 8
question = '''
Notice how PowerShell completes the directory name `C:\Users` for you. Since there is only one root-level directory starting with U, PowerShell knows to expand the parameter accordingly.

When there are multiple matches for command completion, PowerShell shows you the first match. Pressing Tab again will cycle through the other matches. Type `Get-Ne` then press Tab twice. Press Enter to run the command.'''
hint = 'Type `Get-Ne`, then press Tab twice. The command will expand to `Get-Net6to4Configuration` first, then it will expand to `Get-NetAdapter`. Press Enter to run `Get-NetAdapter`.'
answer = '`Get-NetAdapter`'
type = 'str'
str = ['InterfaceDescription']


[[questions]]

number = 9
question = '''
Tab completion allows you to interact with the environment faster, and with fewer errors. It is up to you to make it a habit!

Use tab completion to run the `Get-NetAdapterAdvancedProperty` by typing just a few characters, then press Enter.'''
hint = 'Type `Get-Net` then press Tab several times until PowerShell shows the ` Get-NetAdapterAdvancedProperty` command, then press Enter.'
answer = '`Get-NetAdapterAdvancedProperty`'
type = 'str'
str = ['DisplayName', 'Name', 'DisplayValue']


[[questions]]

number = 10
question = '''
Use `Get-ChildItem` to list the contents of the `C:\Program Files (x86)` directory by typing just a few characters, then press Enter.'''
hint = 'Type `Get-Ch` then press Tab to complete the `Get-ChildItem` command. Press space then `\P` to match any files or directories starting with P in the root of the drive. Press Tab several times until you see `C:\Program Files (x86)`, then press Enter.'
answer = "Get-ChildItem 'C:\\Program Files (x86)\\"
type = 'str'
str = ['Get-ChildItem', 'Program Files (x86)', 'Windows Defender']
cs = false


[[questions]]

number = 11
question = '''
Nicely done! Try to use tab completion every time you use PowerShell.

Next, run the command `Dog`, then press Enter.'''
hint = 'Type `Dog`, then press Enter.'
answer = '`Dog`'
type = 'str'
str = ['Dog : The term', 'is not recognized']
cs = false


[[questions]]

number = 12
question = '''
PowerShell returns an error, indicating that `Dog` is not a valid command. Notice how PowerShell uses `~~~` under the word `Dog` to indicate where the problem is in your command. PowerShell tries to be helpful in pointing out where there is a mistake.

Let's try another error. Type `Get-ChildItem -Dog`, then press Enter.'''
hint = 'Type `Get-ChildItem -Dog`, then press Enter.'
answer = '`Get-ChildItem -Dog`'
type = 'str'
str = ['Get-ChildItem : A parameter cannot be found that matches parameter name']
cs = false


[[questions]]

number = 13
question = '''
Notice in this error how the `~~~~` has moved. `Get-ChildItem` is a valid command, but `-Dog` is not a valid parameter. Look for the `~~~` when you make a mistake in PowerShell to help figure out where you need to make a correction.

Type `next` then press Enter to continue.'''
hint = 'Examine the error string, then run `next` to continue.'
answer = '`next`'
type = 'str'
str = ['NECGlNpyOlPtGiuelNOW']


[[questions]]

number = 14
question = '''
You probably knew that `Dog` wasn't a valid command before you ran it, because it doesn't match the pattern of other PowerShell commands. All of the commands we've run so far follow the Verb-Noun convention.

Run `Get-Verb` to see a list of approved PowerShell verbs.'''
hint = 'Type `Get-Verb`, then press Enter.'
answer = '`Get-Verb`'
type = 'str'
str = ['Get-Verb', 'Group', 'Common']
cs = false


[[questions]]

number = 15
question = '''
This is a long list, but the verbs are fairly intuitive. Verbs like `Get`, `Start`, `Write`, etc. all perform certain types of functions that we can grasp just by looking at the PowerShell name.

Next, run `Get-Noun`.'''
hint = 'Type `Get-Noun`, then press Enter.'
answer = '`Get-Noun`'
type = 'str'
str = ['is not recognized as the name of a cmdlet']


[[questions]]

number = 16
question = '''
`Get-Noun` returns an error; there is no defined list of PowerShell nouns. The noun choice is up to the developer, and this is where we get a lot of variety in PowerShell functionality.

Next, let's look at some popular Verb-Noun PowerShell functionality. Run the `Get-Date` command.'''
hint = 'Type `Get-Date`, then press Enter.'
answer = '`Get-Date`'
type = 'rgx'
rgx = ['Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday', '20\d\d']


[[questions]]

number = 17
question = '''
Before you pressed Enter, you probably knew what the `Get-Date` command would do because the Verb-Noun naming convention is intuitive.

Next, type `Get-Volume`, then press Enter. (You may have to run this command twice if you don't get any output the first time!)'''
hint = "Type `Get-Volume`, then press Enter. If you don't see output from the command, press the up arrow and run the command a second time."
answer = '`Get-Volume`'
type = 'str'
str = ['DriveLetter', 'FriendlyName']


[[questions]]

number = 18
question = '''
Here we get more intuitive output; `Get-Volume` returns information about the file system volumes for the Windows host.

Next, let's try a different verb. Type the `Start-Process Notepad`, then press Enter.'''
hint = 'Type `Start-Process Notepad`, then press Enter.'
answer = '`Start-Process Notepad`'
type = 'py'
py = '''
d=subprocess.Popen('wmic process get name', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0];
ret = 'notepad' in d.decode('utf8')
'''


[[questions]]

number = 19
question = '''
The Start verb implies that it will begin a process or a task. The noun Process indicates that it will start a local process. Here we're starting Notepad from PowerShell.

Next, let's look at the `Get-Process` command. Type `Get-Process Notepad`, then press Enter.'''
hint = 'Type `Get-Process Notepad`, then press Enter. If you closed Notepad already, start it again, then run `Get-Process Notepad`.'
answer = '`Get-Process Notepad`'
type = 'str'
str = ['Handles', 'NPM', 'ProcessName', 'Notepad']


[[questions]]

number = 20
question = '''
Where the Start verb initiates a task (such as a process), the Get verb retrieves information. Here we see information about the Notepad process including open file handles and CPU statistics.

Next, type `Stop-Process Notepad`, then press Enter.'''
hint = 'Type `Stop-Process Notepad`, then press Enter. PowerShell will return an error message.'
answer = '`Stop-Process Notepad`'
type = 'str'
str = ['System.Diagnostics.Process', 'InvalidArgument']



[[questions]]

number = 21
question = '''
PowerShell returns an error here since `Stop-Process` expects different input than the name of the process.

To stop a process, we need to specify two parameters: the `-Name` parameter option, and the process name as the parameter value. Type the command `Stop-Process -Name Notepad`, then press Enter.'''
hint = ''
answer = '`Stop-Process -Name Notepad`'
type = 'py'
py = '''
d=subprocess.Popen('wmic process get name', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0];
ret = 'notepad' not in d.decode('utf8')
'''


[[questions]]

number = 22
question = '''
Nicely done! You've successfully stopped the Notepad process using `Stop-Process`.

Type `next` then press Enter to continue.'''
hint = 'Type `next`, then press Enter.'
answer = '`next`'
type = 'str'
str = ['RUMMsDnrFbSlZYLhmpvL']


[[questions]]

number = 23
question = '''
Let's investigate the `Start-Process` command further. We can use `Get-Command` to collect additional information about PowerShell commands.

Type `Get-Command -Name Start-Process`, then press Enter.'''
hint = 'Type `Get-Command -Name Start-Process`.'
answer = '`Get-Command -Name Start-Process`'
type = 'str'
str = ['CommandType', 'Get-Command', '-Name', 'Start-Process', 'Cmdlet']
cs = false


[[questions]]

number = 24
question = '''
Although we have been calling it a PowerShell command, the `Get-Command` feature is a cmdlet. Cmdlets are one of the building blocks of PowerShell, typically written by PowerShell developers in a programming language such as C#.

Let's take a look at another command using `Get-Command`. Type `Get-Command -Name Get-Volume`, then press Enter.'''
hint = 'Type `Get-Command -Name Get-Volume`, then press Enter.'
answer = '`Get-Command -Name Get-Volume`'
type = 'str'
str = ['CommandType', 'Get-Volume', 'Function']
cs = false


[[questions]]

number = 25
question = '''
Here we learn that `Get-Volume` is not a cmdlet; rather, it is a function. Functions are PowerShell features written using PowerShell. From our perspective, we don't normally care about whether something is a cmdlet or a function; we use both commands the same way.

We'll wrap up our look at PowerShell command types with one more command. Type `Get-Command -Noun Volume`, then press Enter.'''
hint = 'Type `Get-Command -Noun Volume`, then press Enter. Note that we changed the parameter name to `-Noun` for this command.'
answer = '`Get-Command -Noun Volume`'
type = 'str'
str = ['CommandType', 'Name', 'Alias', 'Function']


[[questions]]

number = 26
question = '''
Using `Get-Command` with `-Noun` is handy since you can quickly find all of the PowerShell commands that work with a specific noun. Here we also learn about another command type: aliases.

Type `next`, then press Enter to continue.'''
hint = 'Type `next`, then press Enter to continue.'
answer = '`next`'
type = 'str'
str = ['aTyrgYiujctAAxPZllym']


[[questions]]

number = 27
question = '''
So far we've done a lot of typing, and there's a lot of that in PowerShell. Tab completion helps, but running `Get-ChildItem` 1000x/day gets annoying. This is why we have aliases.

Aliases are shortcuts to run PowerShell commands. Instead of `Get-ChildItem`, you can run the `dir` command. Do that now.'''
hint = 'Type `dir` using any capitalization, then press Enter.'
answer = '`dir`'
type = 'str'
str = ['Mode', 'LastWriteTime', 'Length', 'Name']



[[questions]]

number = 28
question = '''
Many PowerShell users will use an alias when working with PowerShell interactively, and will use the full command name in scripts.

You can use the `Get-Alias` command to look up the command associated with an alias. Type `Get-Alias Dir`, then press Enter.'''
hint = 'Type `Get-Alias Dir`, then press Enter.'
answer = '`Get-Alias Dir`'
type = 'str'
str = ['dir -> Get-ChildItem']



[[questions]]

number = 29
question = '''
We can also look up the aliases associated with a given PowerShell command.

Type `Get-Alias -Definition Get-ChildItem`, then press Enter.'''
hint = "Type `Get-Alias -Definition Get-ChildItem`, then press Enter. Don't forget about tab completion!"
answer = '`Get-Alias -Definition Get-ChildItem`'
type = 'str'
str = ['dir', 'gci', 'ls']
cs = false



[[questions]]

number = 30
question = '''
Great job! Now it's your turn.

Find an alias for `Get-Timezone`.'''
hint = 'Remember you can use `Get-Alias -Definition`, followed by any PowerShell command to find the supported aliases.'
answer = '`Get-Alias -Definition Get-Timezone`'
type = 'str'
str = ['gtz -> Get-TimeZone']



[[questions]]

number = 31
question = '''
Nice work! Next, find out which command uses the alias `ps`.'''
hint = 'To look up the command associated with an alias, run `Get-Alias`, followed by the alias. No parameter option is needed.'
answer = '`Get-Alias ps`'
type = 'str'
str = ['ps -> Get-Process']



[[questions]]

number = 32
question = '''
A big part of learning PowerShell is memorizing lots of commands and syntax. You're well on your way, but there's also PowerShell's built-in help function to provide assistance along the way.

Type `Get-Help`, then press Enter to display PowerShell's help system information.'''
hint = 'Type `Get-Help`, then press Enter'
answer = '`Get-Help`'
type = 'str'
str = ['Windows PowerShell Help System']


[[questions]]

number = 33
question = '''
You may need to scroll back a bit to see the help information. Here, `Get-Help` provides high-level information about the PowerShell help system.

`Get-Help` also provides instructions for specific commands. Run `Get-Help Get-Process` to get help information for the `Get-Process` cmdlet.'''
hint = 'Type `Get-Help Get-Process` then press Enter.'
answer = '`Get-Help Get-Process`'
type = 'str'
str = ['Gets the processes that are running on the local computer or a remote computer']



[[questions]]

number = 34
question = '''
When you run `Get-Help`, the help information displays all at once. Most of the time, we want to read the help documentation one screen at a time. This is the behavior of the `Help` function.

Type `Help Get-Process`, then press Enter. Press the spacebar several times to get to the end of the help information, then run `next` to continue.'''
hint = 'Type `Help Get-Process`, then press Enter. Press the spacebar several times until you get to the end of the help information and return to the PowerShell prompt, then run `next` to continue.'
answer = '`next`'
type = 'str'
str = ['rFsVPYUJnqcTciPzTjeo']



[[questions]]

number = 35
question = '''
This help information displays the syntax (parameter options and values), a description, online resources and more for the `Get-Process` command. You can use this anytime you need to look up the syntax associated with a command.

But there's more! Type `Get-Help -Examples Get-Process`, then press Enter. Scroll up to scan through the help information.'''
hint = 'Type `Get-Help -Examples Get-Process`, then press Enter.'
answer = '`Get-Help -Examples Get-Process`'
type = 'str'
str = ['Example 10']



[[questions]]

number = 36
question = '''
By adding the `-Examples` parameter, PowerShell will show you several examples for each PowerShell command. This is a useful resource, since many of us will learn better by seeing examples of PowerShell commands in use.

PowerShell also provides high-level help information. Type `Get-Help about_Core_Commands`, then press Enter.'''
hint = 'Type `Get-Help about_Core_Commands`, then press Enter.'
answer = '`Get-Help about_Core_Commands`'
type = 'str'
str = ['about_Providers']



[[questions]]

number = 37
question = '''
The `about_Core_Commands` help information lists several high-level PowerShell cmdlets or use in working with PowerShell providers (such as file systems, or the Windows registry).

There are many other PowerShell `about` help subjects. Type `Get-Help about*`, then press Enter.'''
hint = 'Type `Get-Help about*`, then press Enter.'
answer = '`Get-Help about*`'
type = 'str'
str = ['about_Workflows']


[[questions]]

number = 38
question = '''
One last thing. PowerShell can also run CLI commands that we used to run in the Command Prompt.

Try it now. Type `ping 127.0.0.1`, then press Enter to use the `ping.exe` program.'''
hint = 'Type `ping 127.0.0.1`, then press Enter.'
answer = '`ping 127.0.0.1`'
type = 'str'
str = ['ping', '127.0.0.1']
cs = false



[[questions]]

number = 39
question = '''
In PowerShell, if you don't specify a path, then it will run commands in this order: aliases, functions, cmdlets, then external programs. Sometimes, this can lead to confusion.

Type `sc query`, then press Enter. PowerShell will prompt you for an option; press Enter when prompted.'''
hint = 'Type `sc query`, then press Enter.'
answer = '`sc query`'
type = 'str'
str = ['sc', 'query']
cs = false


[[questions]]

number = 40
question = '''
Normally we think of `sc` as the Service Control utility for managing Windows services. However, PowerShell uses `sc` as an alias for `Set-Content` as well.

If you want to run a local Windows executable and want to avoid a name conflict with PowerShell aliases, include the `.exe` part of the executable. Type `sc.exe query`, then press Enter.'''
hint = 'Type `sc.exe query` to specify the `sc.exe` executable, not the `sc` PowerShell alias for `Set-Content`.'
answer = '`sc.exe query`'
type = 'str'
str = ['sc.exe', 'query']
cs = false
